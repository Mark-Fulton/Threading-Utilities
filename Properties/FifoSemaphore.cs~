using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace Mark.Utilities.MAC
{
	public class FifoSemaphore :Semaphore
	{
		private readonly Queue<Semaphore> SemaphoreQueue;
		private readonly object FifoSemaphoreObject = new object ();

		public FifoSemaphore (): base(0)
		{
			SemaphoreQueue = new Queue<Semaphore> ();
		}

		public override void AcquireToken ()
		{
			Semaphore Sem = new Semaphore(0);
			lock (FifoSemaphoreObject) {
				if (SemaphoreQueue.Count == 0) {
					base.TokenCount--;
					return;
				}
				Sem.AcquireToken ();
			}
			SemaphoreQueue.Enqueue (Sem);
		}

		public override void ReleaseToken()
		{
			Semaphore Sem;
			lock (FifoSemaphoreObject){
				if (SemaphoreQueue.Count == 0){
					base.TokenCount++;
					return;
				}
				Sem = SemaphoreQueue.Dequeue();
			}
			Sem.ReleaseToken();
		}
	}
}

