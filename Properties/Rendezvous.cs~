using System;
using System.Threading;

namespace Mark.Utilities.MAC
{
	/// <summary>
	/// Rendezvous.
	/// </summary>
	public class Rendezvous<T>
	{
		private readonly Semaphore RendezvousSemaphoreT1;
		private readonly Semaphore RendezvousSemaphoreT2;
		private readonly Semaphore RendezvousSemaphoreT3;
		private T ObjectHolderT1 = default(T);
		private T ObjectHolderT2 = default(T);
		private T nullObject = default(T);

		/// <summary>
		/// Initializes a new instance of the <see cref="Mark.Utilities.MAC.Rendezvous`1"/> class.
		/// 
		/// 
		/// </summary>
		public Rendezvous ()
		{
			RendezvousSemaphoreT1 = new Semaphore(2);
			RendezvousSemaphoreT2 = new Semaphore(0);
			RendezvousSemaphoreT3 = new Semaphore(1);
		}

		/// <summary>
		/// Exchange the specified Object.
		/// </summary>
		/// <param name="Object">Object.</param>
		public T Exchange(T Object)
		{ 
			RendezvousSemaphoreT1.AcquireToken ();
			RendezvousSemaphoreT3.AcquireToken ();
			if (ObjectHolderT1.Equals (nullObject)) {
					ObjectHolderT1 = Object;
					RendezvousSemaphoreT3.ReleaseToken();
					RendezvousSemaphoreT2.AcquireToken();
					return ObjectHolderT2;
				}
			ObjectHolderT2 = Object;
			T ObjectHolderT3 = ObjectHolderT1;
			ObjectHolderT1 = default(T);
			RendezvousSemaphoreT2.ReleaseToken ();
			RendezvousSemaphoreT1.ReleaseToken (2);
			RendezvousSemaphoreT3.ReleaseToken ();
			return ObjectHolderT3;
		}
	}
}

